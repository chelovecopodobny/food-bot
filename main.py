import telebot
from telebot import types

bot = telebot.TeleBot("7983748330:AAFh96j12oGQMdm7a_nV5u0PySr0U9uKYiY")

@bot.message_handler(commands=["start"])
def main(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.username}, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –µ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é. –ò—Å–ø–æ–ª—å–∑—É–π /help –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–π–º–µ—à—å")

@bot.message_handler(commands=["help"])
def main(message):
    bot.send_message(message.chat.id, f"{message.from_user.username}, –∏—Å–ø–æ–ª—å–∑—É–π /—Å–æ–∑–¥–∞—Ç—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω (—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ!!!), –∏—Å–ø–æ–ª—å–∑—É–π /–ø–ª–∞–Ω, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω")


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–ª—é–¥: user_id ‚Üí {'–¥–µ–Ω—å': {'–ø—Ä–∏—ë–º': '–±–ª—é–¥–æ'}}
meals = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: user_id ‚Üí (–¥–µ–Ω—å, –ø—Ä–∏—ë–º), –∂–¥—ë–º —Ç–µ–∫—Å—Ç
waiting_for_input = {}

@bot.message_handler(commands=["—Å–æ–∑–¥–∞—Ç—å"])
def start(message):
    markup = types.InlineKeyboardMarkup()
    for day in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]:
        markup.add(types.InlineKeyboardButton(day, callback_data=day.lower()))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"])
def choose_meal(call):
    day = call.data
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫", callback_data=f"{day}_–∑–∞–≤—Ç—Ä–∞–∫"))
    markup.add(types.InlineKeyboardButton("–û–±–µ–¥", callback_data=f"{day}_–æ–±–µ–¥"))
    markup.add(types.InlineKeyboardButton("–£–∂–∏–Ω", callback_data=f"{day}_—É–∂–∏–Ω"))
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {day.capitalize()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—ë–º –ø–∏—â–∏:",
                          reply_markup=markup)

@bot.callback_query_handler(func=lambda call: "_–∑–∞–≤—Ç—Ä–∞–∫" in call.data or "_–æ–±–µ–¥" in call.data or "_—É–∂–∏–Ω" in call.data)
def ask_for_dish(call):
    day, meal = call.data.split("_")
    user_id = call.from_user.id
    waiting_for_input[user_id] = (day, meal)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, f"–ß—Ç–æ –±—É–¥–µ—à—å –µ—Å—Ç—å –Ω–∞ {meal} –≤ {day}? –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º üçΩÔ∏è")

@bot.message_handler(func=lambda message: message.from_user.id in waiting_for_input)
def save_dish(message):
    user_id = message.from_user.id
    day, meal = waiting_for_input.pop(user_id)
    dish = message.text

    if user_id not in meals:
        meals[user_id] = {}
    if day not in meals[user_id]:
        meals[user_id][day] = {}
    
    meals[user_id][day][meal] = dish

    bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å–∞–ª–∞: {dish} –Ω–∞ {meal} –≤ {day.capitalize()}! üìù")

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫
@bot.message_handler(commands=["–ø–ª–∞–Ω"])
def show_plan(message):
    user_id = message.from_user.id
    plan = meals.get(user_id, {})
    if not plan:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ —á—Ç–æ —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª üò¢")
        return
    text = "–¢–≤–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:\n\n"
    for day in plan:
        text += f"üìÖ {day.capitalize()}:\n"
        for meal in plan[day]:
            text += f"  üçΩÔ∏è {meal.capitalize()}: {plan[day][meal]}\n"
        text += "\n"
    bot.send_message(message.chat.id, text)

bot.polling(non_stop=True)
